#lang sicp

(define (make-table)
  ; ノードは (key, (value, (left, right)))
  (define (make-node key value)
    (cons key (cons value (cons '() '()))))
  (define (node-key node) (car node))
  (define (node-value node) (cadr node))
  (define (node-left node) (caddr node))
  (define (node-right node) (cdddr node))
  (define (set-node-value! node value) (set-car! (cdr node) value))
  (define (set-node-left! node left) (set-car! (cddr node) left))
  (define (set-node-right! node right) (set-cdr! (cddr node) right))
  (let ((tree '()))
    (define (lookup key)
      (define (search node)
        (cond ((null? node) false)
              ((= key (node-key node)) (node-value node))
              ((< key (node-key node)) (search (node-left node)))
              (else (search (node-right node)))))
      (search tree))
    (define (insert! key value)
      (define (insert-node! node)
        (cond ((= key (node-key node))
               (set-node-value! node value))
              ((< key (node-key node))
               (let ((left (node-left node)))
                 (if (null? left)
                     (set-node-left! node (make-node key value))
                     (insert-node! left))))
              (else
               (let ((right (node-right node)))
                 (if (null? right)
                     (set-node-right! node (make-node key value))
                     (insert-node! right))))))
      (if (null? tree)
          (set! tree (make-node key value))
          (insert-node! tree))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define (table-lookup-proc table)
  (table 'lookup-proc))

(define (table-insert-proc! table)
  (table 'insert-proc!))

(define (check-equal expected actual label)
  (if (equal? expected actual)
      'ok
      (error "TEST FAILED" label expected actual)))

(define (check-false actual label)
  (if (eq? actual false)
      'ok
      (error "TEST FAILED" label actual)))

(define (test-empty-lookup)
  (let* ((table (make-table))
         (lookup (table-lookup-proc table)))
    (check-false (lookup 10)
                 "lookup on empty table returns false")))

(define (test-insert-and-lookup)
  (let* ((table (make-table))
         (lookup (table-lookup-proc table))
         (insert! (table-insert-proc! table)))
    (insert! 10 'a)
    (insert! 5 'b)
    (insert! 15 'c)
    (insert! 7 'd)
    (check-equal 'a (lookup 10)
                 "lookup finds root node"))
  (let* ((table (make-table))
         (lookup (table-lookup-proc table))
         (insert! (table-insert-proc! table)))
    (insert! 10 'a)
    (insert! 5 'b)
    (insert! 15 'c)
    (insert! 7 'd)
    (check-equal 'b (lookup 5)
                 "lookup finds left child"))
  (let* ((table (make-table))
         (lookup (table-lookup-proc table))
         (insert! (table-insert-proc! table)))
    (insert! 10 'a)
    (insert! 5 'b)
    (insert! 15 'c)
    (insert! 7 'd)
    (check-equal 'c (lookup 15)
                 "lookup finds right child")))

(define (test-update-existing)
  (let* ((table (make-table))
         (lookup (table-lookup-proc table))
         (insert! (table-insert-proc! table)))
    (insert! 10 'a)
    (insert! 10 'a-updated)
    (check-equal 'a-updated (lookup 10)
                 "insert updates existing key")))

(define (test-lookup-missing-key)
  (let* ((table (make-table))
         (lookup (table-lookup-proc table))
         (insert! (table-insert-proc! table)))
    (insert! 10 'a)
    (insert! 5 'b)
    (check-false (lookup 1)
                 "lookup for missing key returns false")))

(define (run-tests)
  (test-empty-lookup)
  (test-insert-and-lookup)
  (test-update-existing)
  (test-lookup-missing-key)
  '3.26-tests-passed)

(run-tests)
