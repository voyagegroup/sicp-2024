#lang sicp

; Message-passing queue that stores front/rear pointers as local state
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (if (empty?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))
    (define (insert! item)
      (let ((new-pair (cons item '())))
        (if (empty?)
            (begin (set! front-ptr new-pair)
                   (set! rear-ptr new-pair)
                   'ok)
            (begin (set-cdr! rear-ptr new-pair)
                   (set! rear-ptr new-pair)
                   'ok))))
    (define (delete!)
      (if (empty?)
          (error "DELETE! called with an empty queue")
          (begin (set! front-ptr (cdr front-ptr))
                 (if (null? front-ptr)
                     (set! rear-ptr '())
                     'ok)
                 'ok)))
    (define (print)
      (define (print-items items first?)
        (cond ((null? items) 'done)
              (first?
               (display (car items))
               (print-items (cdr items) #f))
              (else
               (display " ")
               (display (car items))
               (print-items (cdr items) #f))))
      (display "(")
      (print-items front-ptr #t)
      (display ")")
      (newline)
      'done)
    (define (dispatch m)
      (cond ((eq? m 'empty?) (empty?))
            ((eq? m 'front) (front))
            ((eq? m 'insert!) insert!)
            ((eq? m 'delete!) (delete!))
            ((eq? m 'print) (print))
            (else (error "Unknown operation -- QUEUE" m))))
    dispatch))

(define (empty-queue? queue)
  (queue 'empty?))

(define (front-queue queue)
  (queue 'front))

(define (insert-queue! queue item)
  ((queue 'insert!) item))

(define (delete-queue! queue)
  (queue 'delete!))

(define (print-queue queue)
  (queue 'print))


(define q1 (make-queue))

(insert-queue! q1 'a)
(print-queue q1)
(insert-queue! q1 'b)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
