#lang sicp
; 問1.11
; n<3に対してf(n)=n, n ≥ 3に対してf(n)=f(n - 1) + 2 f(n - 2) + 3 f(n - 3)なる規則で定義する関数fがある. 再帰的プロセスの方法でf を計算する手続きを書け. 反復的プロセスの方法でfを計算する手続きを書け.

; 再帰的
(define (f1 n)
  (cond ((< n 3) n)
        ((>= n 3)
         (+
          (f1 (- n 1))
          (* 2 (f1 (- n 2)))
          (* 3 (f1 (- n 3)))))))

(f1 1)
; 1
(f1 2)
; 2
(f1 5)
; 25
(f1 10)
; 1892
;(f1 30)
; 61354575194

(f1 5)
(cond ((< 5 3) 5)
      ((>= 5 3)
       (+
        (f1 (- 5 1))
        (* 2 (f1 (- 5 2)))
        (* 3 (f1 (- 5 3))))))
; (>= 5 3) が #t
(+ (f1 4) (* 2 (f1 3)) (* 3 (f1 2)))
; f1(4)
; -> (+ (f1 3) (* 2 (f1 2)) (* 3 (f1 1)))
; f1(3)
; -> (+ (f1 2) (* 2 (f1 1)) (* 3 (f1 0)))

; (+ (f1 4) (* 2 (f1 3)) (* 3 (f1 2))) の f1(4) と f(3) を置き換え
(+
 (+ (+ (f1 2) (* 2 (f1 1)) (* 3 (f1 0))) (* 2 (f1 2)) (* 3 (f1 1)))
 (* 2 (+ (f1 2) (* 2 (f1 1)) (* 3 (f1 0))))
 (* 3 (f1 2)))
; f1(0) -> 0, f1(1) -> 1, f1(2) -> 2
(+
 (+ (+ 2 (* 2 1) (* 3 0)) (* 2 2) (* 3 1))
 (* 2 (+ 2 (* 2 1) (* 3 0)))
 (* 3 2))
; -> 25


; 反復的
(define (f-iter a b c count)
  (if (= count 2) ; n = 3が最低値なので、2になったら終わる
      a
      (f-iter (+ a (* 2 b) (* 3 c)) a b (- count 1))))
(define (f2 n)
  (if (< n 3)
      n
      (f-iter 2 1 0 n)))

(f2 1)
; 1
(f2 2)
; 2
(f2 5)
; 25
(f2 10)
; 1892
;(f2 30)
; 61354575194

(f2 5)
(f-iter 2 1 0 5)
(f-iter (+ 2 (* 2 1) (* 3 0)) 2 1 (- 5 1))
(f-iter (+ 2 2 0) 2 1 4)
(f-iter 4 2 1 4)
(f-iter (+ 4 (* 2 2) (* 3 1)) 4 2 (- 4 1))
(f-iter (+ 4 4 3) 4 2 3)
(f-iter 11 4 2 3)
(f-iter (+ 11 (* 2 4) (* 3 2)) 11 4 (- 3 1))
(f-iter (+ 11 8 6) 11 4 2)
(f-iter 25 11 4 2)
; (= count 2) -> #t
; -> 25



