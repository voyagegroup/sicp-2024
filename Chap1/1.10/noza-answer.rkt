#lang racket

(define (A x y)
  (cond 
    ((= y 0) 0)
    ((= x 0) (* 2 y))
    ((= y 1) 2)
    (else (A (- x 1) (A x (- y 1))))))

(A 1 10)
(A 2 4)
(A 3 3)

; アッカーマン関数の定義が非負整数に対する定義なので x >= 0、y >= 0 について考える
(define (f n) (A 0 n))
; (A 0 n)
; (= x 0) が真なので (* 2 n) を評価する
; そのため 2n
(f 3)
(f 8)
(define (g n) (A 1 n))
; (A 1 n)
; (A (- 1 1) (A 1 (- n 1)))
; (A 0 (A 1 (- n 1)))
; (A 0 (A 0 (A 1 (- n 2)))) ...
; (A 0 (A 0 2))
; となるので
; n > 1 において(A 0 ...) がn回展開されてyが1になったときに2と評価され以降 (* 2 y) がn回評価されるので 2^n
; n = 1 のときは 2
; n = 0 のときは 0
; よって n > のときは 2^n、n = 0 のとき 0
(g 3)
(g 10)
(define (h n) (A 2 n))
; (h 3)
; (A 2 3)
; (A 1 (A 2 2))
; (A 1 (A 1 (A 2 1)))
; (A 1 (A 1 2))
; (A 1 (A 0 (A 1 1)))
; (A 1 (A 0 2))
; (A 1 4)
; 16

; (h 4)
; (A 2 4)
; (A 1 (A 2 3))
; (A 1 (A 1 (A 2 2)))
; (A 1 (A 1 (A 1 (A 2 1))))
; (A 1 (A 1 (A 1 2)))
; (A 1 (A 1 (A 0 (A 1 1))))
; (A 1 (A 1 (A 0 2)))
; (A 1 (A 1 4))
; (A 1 16)
; 65536

; (h 5)
; (A 1 (A 1 (A 1 4)))
; (A 1 (A 1 16))
; (A 1 65536)

(h 3) ; -> 2^(2^2) = 2^4 = 16
(h 4) ; -> 2^(2^(2^2)) = 2^16 = 65536 
(h 5) ; -> 2^(2^(2^(2^2))) = 2^65536 = 大変だあ

; nが1増えるごとに(A 1 (A 1 (A 1 ... (A 1 4)))) となっていくのでn-1番目の結果の2乗ずつ増えていく
; ので 2^2^2^2^2^2... nに応じて累乗が2の肩に乗るようになる

(define (k n) (* 5 n n))
